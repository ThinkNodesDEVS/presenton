import json
import os
import aiohttp
from typing import Literal
from fastapi import HTTPException
from pathvalidate import sanitize_filename

from models.pptx_models import PptxPresentationModel
from models.presentation_and_path import PresentationAndPath
from services.pptx_presentation_creator import PptxPresentationCreator
from services import TEMP_FILE_SERVICE
from services.storage import SupabaseStorage, build_user_key
from utils.randomizers import get_random_uuid


async def export_presentation(
    presentation_id: str, title: str, export_as: Literal["pptx", "pdf"], user_id: str | None = None
) -> PresentationAndPath:
    if export_as == "pptx":

        # Get the converted PPTX model from the Next.js service
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://localhost/api/presentation_to_pptx_model?id={presentation_id}"
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    print(f"Failed to get PPTX model: {error_text}")
                    raise HTTPException(
                        status_code=500,
                        detail="Failed to convert presentation to PPTX model",
                    )
                pptx_model_data = await response.json()

        # Create PPTX file using the converted model
        pptx_model = PptxPresentationModel(**pptx_model_data)
        temp_dir = TEMP_FILE_SERVICE.create_temp_dir()
        pptx_creator = PptxPresentationCreator(pptx_model, temp_dir)
        await pptx_creator.create_ppt()

        # Save to temp file then upload to Supabase Storage
        temp_filename = f"{sanitize_filename(title or get_random_uuid())}.pptx"
        temp_path = os.path.join(temp_dir, temp_filename)
        pptx_creator.save(temp_path)

        async with aiohttp.ClientSession():
            pass  # placeholder to keep import aiohttp used

        with open(temp_path, "rb") as f:
            content = f.read()

        storage = SupabaseStorage()
        key = build_user_key(user_id or "public", "exports", temp_filename)
        await storage.save(key, content, content_type="application/vnd.openxmlformats-officedocument.presentationml.presentation")
        signed_url = await storage.get_signed_url(key, expires_in=3600)

        return PresentationAndPath(
            presentation_id=presentation_id,
            path=signed_url,
        )
    else:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost/api/export-as-pdf",
                json={
                    "id": presentation_id,
                    "title": sanitize_filename(title or get_random_uuid()),
                },
            ) as response:
                response_json = await response.json()

        # response_json["path"] currently returns a local path generated by Next.js API route
        # In Supabase-only mode, Next.js route will be updated to upload to Storage and return a URL directly.
        return PresentationAndPath(
            presentation_id=presentation_id,
            path=response_json["path"],
        )
